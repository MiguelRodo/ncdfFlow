// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ncdfFlow.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// toBitVec
Rcpp::RawVector toBitVec(Rcpp::LogicalVector indx);
RcppExport SEXP _ncdfFlow_toBitVec(SEXP indxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type indx(indxSEXP);
    rcpp_result_gen = Rcpp::wrap(toBitVec(indx));
    return rcpp_result_gen;
END_RCPP
}
// toLogical
Rcpp::LogicalVector toLogical(Rcpp::RawVector bytes);
RcppExport SEXP _ncdfFlow_toLogical(SEXP bytesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RawVector >::type bytes(bytesSEXP);
    rcpp_result_gen = Rcpp::wrap(toLogical(bytes));
    return rcpp_result_gen;
END_RCPP
}
// createFile
bool createFile(std::string filename, int nEvent, int nChannel, int nSample, int nDim, int nCompressionRatio, bool is_libver_earliest);
RcppExport SEXP _ncdfFlow_createFile(SEXP filenameSEXP, SEXP nEventSEXP, SEXP nChannelSEXP, SEXP nSampleSEXP, SEXP nDimSEXP, SEXP nCompressionRatioSEXP, SEXP is_libver_earliestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< int >::type nEvent(nEventSEXP);
    Rcpp::traits::input_parameter< int >::type nChannel(nChannelSEXP);
    Rcpp::traits::input_parameter< int >::type nSample(nSampleSEXP);
    Rcpp::traits::input_parameter< int >::type nDim(nDimSEXP);
    Rcpp::traits::input_parameter< int >::type nCompressionRatio(nCompressionRatioSEXP);
    Rcpp::traits::input_parameter< bool >::type is_libver_earliest(is_libver_earliestSEXP);
    rcpp_result_gen = Rcpp::wrap(createFile(filename, nEvent, nChannel, nSample, nDim, nCompressionRatio, is_libver_earliest));
    return rcpp_result_gen;
END_RCPP
}
// open_hdf
void open_hdf(std::string filename, unsigned flags, hid_t& fileid, hid_t& dataset, hid_t& dataspace, bool& is3d);
RcppExport SEXP _ncdfFlow_open_hdf(SEXP filenameSEXP, SEXP flagsSEXP, SEXP fileidSEXP, SEXP datasetSEXP, SEXP dataspaceSEXP, SEXP is3dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< unsigned >::type flags(flagsSEXP);
    Rcpp::traits::input_parameter< hid_t& >::type fileid(fileidSEXP);
    Rcpp::traits::input_parameter< hid_t& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< hid_t& >::type dataspace(dataspaceSEXP);
    Rcpp::traits::input_parameter< bool& >::type is3d(is3dSEXP);
    open_hdf(filename, flags, fileid, dataset, dataspace, is3d);
    return R_NilValue;
END_RCPP
}
// writeSlice
bool writeSlice(std::string filename, Rcpp::NumericMatrix data, std::vector<int> chIndx, int sampleIndx, int nRatio);
RcppExport SEXP _ncdfFlow_writeSlice(SEXP filenameSEXP, SEXP dataSEXP, SEXP chIndxSEXP, SEXP sampleIndxSEXP, SEXP nRatioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type chIndx(chIndxSEXP);
    Rcpp::traits::input_parameter< int >::type sampleIndx(sampleIndxSEXP);
    Rcpp::traits::input_parameter< int >::type nRatio(nRatioSEXP);
    rcpp_result_gen = Rcpp::wrap(writeSlice(filename, data, chIndx, sampleIndx, nRatio));
    return rcpp_result_gen;
END_RCPP
}
// get_event_number
unsigned get_event_number(hid_t fileid, hid_t& dataset, hid_t& dataspace, unsigned sampleIndx, bool is3d);
RcppExport SEXP _ncdfFlow_get_event_number(SEXP fileidSEXP, SEXP datasetSEXP, SEXP dataspaceSEXP, SEXP sampleIndxSEXP, SEXP is3dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< hid_t >::type fileid(fileidSEXP);
    Rcpp::traits::input_parameter< hid_t& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< hid_t& >::type dataspace(dataspaceSEXP);
    Rcpp::traits::input_parameter< unsigned >::type sampleIndx(sampleIndxSEXP);
    Rcpp::traits::input_parameter< bool >::type is3d(is3dSEXP);
    rcpp_result_gen = Rcpp::wrap(get_event_number(fileid, dataset, dataspace, sampleIndx, is3d));
    return rcpp_result_gen;
END_RCPP
}
// close_hdf
void close_hdf(hid_t fileid);
RcppExport SEXP _ncdfFlow_close_hdf(SEXP fileidSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< hid_t >::type fileid(fileidSEXP);
    close_hdf(fileid);
    return R_NilValue;
END_RCPP
}
// readSlice
void readSlice(hid_t fileid, hid_t dataset, hid_t dataspace, std::vector<unsigned> chIndx, unsigned sampleIndx, unsigned nEvents, Rcpp::NumericVector data_out, bool is3d);
RcppExport SEXP _ncdfFlow_readSlice(SEXP fileidSEXP, SEXP datasetSEXP, SEXP dataspaceSEXP, SEXP chIndxSEXP, SEXP sampleIndxSEXP, SEXP nEventsSEXP, SEXP data_outSEXP, SEXP is3dSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< hid_t >::type fileid(fileidSEXP);
    Rcpp::traits::input_parameter< hid_t >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< hid_t >::type dataspace(dataspaceSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned> >::type chIndx(chIndxSEXP);
    Rcpp::traits::input_parameter< unsigned >::type sampleIndx(sampleIndxSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nEvents(nEventsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data_out(data_outSEXP);
    Rcpp::traits::input_parameter< bool >::type is3d(is3dSEXP);
    readSlice(fileid, dataset, dataspace, chIndx, sampleIndx, nEvents, data_out, is3d);
    return R_NilValue;
END_RCPP
}
// readFrame
Rcpp::S4 readFrame(Rcpp::S4 x, Rcpp::RObject i_obj, Rcpp::RObject j_obj, bool useExpr);
RcppExport SEXP _ncdfFlow_readFrame(SEXP xSEXP, SEXP i_objSEXP, SEXP j_objSEXP, SEXP useExprSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::S4 >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type i_obj(i_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type j_obj(j_objSEXP);
    Rcpp::traits::input_parameter< bool >::type useExpr(useExprSEXP);
    rcpp_result_gen = Rcpp::wrap(readFrame(x, i_obj, j_obj, useExpr));
    return rcpp_result_gen;
END_RCPP
}
